// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Cluster
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
@_exported import Cluster
import CoreLocation
import Foundation
import MapKit
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers open class Annotation : MapKit.MKPointAnnotation {
  open var style: Cluster.ClusterAnnotationStyle?
  convenience public init(coordinate: CoreLocation.CLLocationCoordinate2D)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ClusterAnnotation : Cluster.Annotation {
  open var annotations: [any MapKit.MKAnnotation]
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class ClusterAnnotationView : MapKit.MKAnnotationView {
  @_Concurrency.MainActor @preconcurrency open var countLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var annotation: (any MapKit.MKAnnotation)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency open func configure()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(annotation: (any MapKit.MKAnnotation)?, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public enum ClusterAnnotationStyle {
  case color(UIKit.UIColor, radius: CoreFoundation.CGFloat)
  case image(UIKit.UIImage?)
}
@objc @_Concurrency.MainActor @preconcurrency open class StyledClusterAnnotationView : Cluster.ClusterAnnotationView {
  @_Concurrency.MainActor @preconcurrency public var style: Cluster.ClusterAnnotationStyle
  @_Concurrency.MainActor @preconcurrency public init(annotation: (any MapKit.MKAnnotation)?, reuseIdentifier: Swift.String?, style: Cluster.ClusterAnnotationStyle)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency override open func configure()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @objc deinit
}
public protocol ClusterManagerDelegate : AnyObject {
  func cellSize(for zoomLevel: Swift.Double) -> Swift.Double?
  func shouldClusterAnnotation(_ annotation: any MapKit.MKAnnotation) -> Swift.Bool
}
extension Cluster.ClusterManagerDelegate {
  public func cellSize(for zoomLevel: Swift.Double) -> Swift.Double?
  public func shouldClusterAnnotation(_ annotation: any MapKit.MKAnnotation) -> Swift.Bool
}
open class ClusterManager {
  open var zoomLevel: Swift.Double {
    get
  }
  open var maxZoomLevel: Swift.Double
  open var minCountForClustering: Swift.Int
  open var shouldRemoveInvisibleAnnotations: Swift.Bool
  open var shouldDistributeAnnotationsOnSameCoordinate: Swift.Bool
  open var distanceFromContestedLocation: Swift.Double
  public enum ClusterPosition {
    case center
    case nearCenter
    case average
    case first
    public static func == (a: Cluster.ClusterManager.ClusterPosition, b: Cluster.ClusterManager.ClusterPosition) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  open var clusterPosition: Cluster.ClusterManager.ClusterPosition
  open var annotations: [any MapKit.MKAnnotation] {
    get
  }
  open var visibleAnnotations: [any MapKit.MKAnnotation]
  open var visibleNestedAnnotations: [any MapKit.MKAnnotation] {
    get
  }
  weak open var delegate: (any Cluster.ClusterManagerDelegate)?
  public init()
  open func add(_ annotation: any MapKit.MKAnnotation)
  open func add(_ annotations: [any MapKit.MKAnnotation])
  open func remove(_ annotation: any MapKit.MKAnnotation)
  open func remove(_ annotations: [any MapKit.MKAnnotation])
  open func removeAll()
  @available(swift, obsoleted: 5.0, message: "Use reload(mapView:)")
  open func reload(_ mapView: MapKit.MKMapView, visibleMapRect: MapKit.MKMapRect)
  open func reload(mapView: MapKit.MKMapView, completion: @escaping (Swift.Bool) -> Swift.Void = { finished in })
  open func clusteredAnnotations(zoomScale: Swift.Double, visibleMapRect: MapKit.MKMapRect, operation: Foundation.Operation? = nil) -> (toAdd: [any MapKit.MKAnnotation], toRemove: [any MapKit.MKAnnotation])
  open func display(mapView: MapKit.MKMapView, toAdd: [any MapKit.MKAnnotation], toRemove: [any MapKit.MKAnnotation])
  @objc deinit
}
extension CoreLocation.CLLocationCoordinate2D : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func == (lhs: CoreLocation.CLLocationCoordinate2D, rhs: CoreLocation.CLLocationCoordinate2D) -> Swift.Bool
public class QuadTree {
  public init(rect: MapKit.MKMapRect)
  @discardableResult
  public func add(_ annotation: any MapKit.MKAnnotation) -> Swift.Bool
  @discardableResult
  public func remove(_ annotation: any MapKit.MKAnnotation) -> Swift.Bool
  public func annotations(in rect: MapKit.MKMapRect) -> [any MapKit.MKAnnotation]
  @objc deinit
}
extension Cluster.ClusterManager.ClusterPosition : Swift.Equatable {}
extension Cluster.ClusterManager.ClusterPosition : Swift.Hashable {}
